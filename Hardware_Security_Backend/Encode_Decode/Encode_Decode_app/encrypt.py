import numpy as np

# The number of columns comprising a state in AES. This is a constant in AES. Value=4
Nb = 4

# The number of rounds in AES Cipher. It is simply initiated to zero. The actual value is received in the program.
Nr = 0

# The number of 32 bit words in the key. It is simply initiated to zero. The actual value is received in the program.
Nk = 0

# in - it is the array that holds the plain text to be encrypted.
# out - it is the array that holds the key for encryption.
# state - the array that holds the intermediate results during encryption.
in_block = np.zeros(16, dtype=np.uint8)
out_block = np.zeros(16, dtype=np.uint8)
state = np.zeros((4, 4), dtype=np.uint8)

# The array that stores the round keys.
RoundKey = np.zeros(240, dtype=np.uint8)

# The Key input to the AES Program
Key = np.zeros(32, dtype=np.uint8)

def getSBoxValue(num):
    sbox = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
    ]
    return sbox[num]

# The round constant word array, Rcon[i], contains the values given by
# x to the power (i-1) being powers of x (x is denoted as {02}) in the field GF(28)
# Note that i starts at 1, not 0).
Rcon = [
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb
]

# This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states.
def KeyExpansion():
    temp = np.zeros(4, dtype=np.uint8)
    i = 0
    while i < Nk:
        RoundKey[4*i] = Key[4*i]
        RoundKey[4*i+1] = Key[4*i+1]
        RoundKey[4*i+2] = Key[4*i+2]
        RoundKey[4*i+3] = Key[4*i+3]
        i += 1
    i = Nk
    while i < Nb * (Nr+1):
        for j in range(4):
            temp[j] = RoundKey[(i-1) * 4 + j]
        if i % Nk == 0:
            k = temp[0]
            temp[0] = temp[1]
            temp[1] = temp[2]
            temp[2] = temp[3]
            temp[3] = k

            temp[0] = getSBoxValue(temp[0])
            temp[1] = getSBoxValue(temp[1])
            temp[2] = getSBoxValue(temp[2])
            temp[3] = getSBoxValue(temp[3])

            temp[0] = temp[0] ^ Rcon[i//Nk]
        elif Nk > 6 and i % Nk == 4:
            temp[0] = getSBoxValue(temp[0])
            temp[1] = getSBoxValue(temp[1])
            temp[2] = getSBoxValue(temp[2])
            temp[3] = getSBoxValue(temp[3])
        RoundKey[4*i+0] = RoundKey[4*(i-Nk)+0] ^ temp[0]
        RoundKey[4*i+1] = RoundKey[4*(i-Nk)+1] ^ temp[1]
        RoundKey[4*i+2] = RoundKey[4*(i-Nk)+2] ^ temp[2]
        RoundKey[4*i+3] = RoundKey[4*(i-Nk)+3] ^ temp[3]
        i += 1

# This function adds the round key to state.
# The round key is added to the state by an XOR function.
def AddRoundKey(round):
    for i in range(4):
        for j in range(Nb):
            state[j][i] ^= RoundKey[round * Nb * 4 + i * Nb + j]

# The SubBytes Function Substitutes the values in the
# state matrix with values in an S-box.
def SubBytes():
    for i in range(4):
        for j in range(Nb):
            state[i][j] = getSBoxValue(state[i][j])

# The ShiftRows() function shifts the rows in the state to the left.
# Each row is shifted with different offset.
# Offset = Row number. So the first row is not shifted.
def ShiftRows():
    temp = np.zeros(4, dtype=np.uint8)

    for i in range(1, 4):
        for j in range(Nb):
            temp[j] = state[i][(j+i) % Nb]
        for j in range(Nb):
            state[i][j] = temp[j]

# The MixColumns function mixes the columns of the state matrix.
def MixColumns():
    for i in range(Nb):
        t = state[0][i]
        Tmp = state[0][i] ^ state[1][i] ^ state[2][i] ^ state[3][i]
        Tm = state[0][i] ^ state[1][i]
        Tm = xtime(Tm)
        state[0][i] ^= Tm ^ Tmp
        Tm = state[1][i] ^ state[2][i]
        Tm = xtime(Tm)
        state[1][i] ^= Tm ^ Tmp
        Tm = state[2][i] ^ state[3][i]
        Tm = xtime(Tm)
        state[2][i] ^= Tm ^ Tmp
        Tm = state[3][i] ^ t
        Tm = xtime(Tm)
        state[3][i] ^= Tm ^ Tmp

def xtime(a):
    return ((a << 1) ^ (0x1b if a & 0x80 else 0x00)) & 0xff

# Cipher is the main function that encrypts the PlainText.
def Cipher():
    global state
    state = np.reshape(in_block, (4, Nb)).T

    AddRoundKey(0)

    for round in range(1, Nr):
        SubBytes()
        ShiftRows()
        MixColumns()
        AddRoundKey(round)

    SubBytes()
    ShiftRows()
    AddRoundKey(Nr)

    out_block[:] = state.T.flatten()

# The function that produces the round constant word array Rcon[], which contains the values given by
# x to the power (i-1) being powers of x (x is denoted as {02}) in the field GF(28).
def RconInit():
    Rcon[0] = 0x8d
    for i in range(1, 255):
        Rcon[i] = xtime(Rcon[i-1])

def validate_and_parse_input(input_str):
    s = input_str.replace(" ", "")
    
    try:
        int(s, 16)
    except:
        return {"error" : "Invalid String"}
    
    return np.array(list(bytes.fromhex(input_str.replace(" ", ""))), dtype=np.uint8)


def format_output(output_bytes):
    return ''.join(f'{byte:02x}' for byte in output_bytes)


def AES_encrypt(input_str, key_str):
    global in_block, out_block, state, RoundKey, Key, Nr, Nk

    input_bytes = validate_and_parse_input(input_str)
    key_bytes = validate_and_parse_input(key_str)

    try :
        in_block[:] = input_bytes[:16]
        key_len = len(key_bytes)
        Key[:key_len] = key_bytes[:]
    except:
        return {"error" : "Invalid String"}
    Nk = key_len // 4
    Nr = Nk + 6

    KeyExpansion()
    Cipher()

    return {"success": format_output(out_block)}



